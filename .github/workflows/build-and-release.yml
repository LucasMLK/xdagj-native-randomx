name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-randomx:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            cmake_args: '-DARCH=native -DBUILD_SHARED_LIBS=ON -DCMAKE_C_FLAGS="-fPIC"'
            artifact_name: 'librandomx.so'
          - os: windows-latest
            cmake_args: '-G "MinGW Makefiles" -DARCH=native -DBUILD_SHARED_LIBS=ON'
            artifact_name: 'randomx.dll'
          - os: macos-latest
            cmake_args: '-DARCH=native -DBUILD_SHARED_LIBS=ON'
            artifact_name: 'librandomx.dylib'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install cmake

      - name: Compile RandomX
        run: |
          cd randomx
          mkdir build && cd build
          cmake .. ${{ matrix.cmake_args }}
          make
          cp librandomx* ../../src/main/resources

      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: src/main/resources/${{ matrix.artifact_name }}

  build-java:
    runs-on: ubuntu-latest
    needs: build-randomx
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download RandomX artifacts
        uses: actions/download-artifact@v4
        with:
          name: librandomx.so
          path: src/main/resources

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package

      - name: List Target Directory
        run: ls -la target

      - name: Get JAR Path
        id: get_jar_path
        run: |
          jar_path=$(ls target/xdagj-native-randomx-*.jar | grep -v 'sources\|javadoc' | head -n 1)
          jar_name=`basename $jar_path`
          echo "JAR_PATH=$jar_path" >> $GITHUB_ENV
          echo "JAR_NAME=$jar_name" >> $GITHUB_ENV

      - name: Archive Java artifact
        uses: actions/upload-artifact@v4
        with:
          name: xdagj_native_randomx_jar
          path: ${{ env.JAR_PATH }}

  release:
    runs-on: ubuntu-latest
    needs: build-java
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: xdagj_native_randomx_jar
          path: ${{ env.JAR_PATH }}

      - name: Display directory tree
        run: tree

      - name: Echo JAR Name
        id: get_jar_name
        run: |
          jar_name=$(ls xdagj-native-randomx-*.jar)
          echo "JAR_NAME=$jar_name" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.XDAGJ_RANDOMX_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Debug(tree)
        run: tree
      - name: Debug(echo name)
        run: echo "${{ env.JAR_NAME }}"

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.XDAGJ_RANDOMX_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.JAR_NAME }}
          asset_name: ${{ env.JAR_NAME }}
          asset_content_type: application/java-archive