name: Build and Release

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop
jobs:
  build-randomx:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, amd64, aarch64]
        include:
          # Linux - x86_64
          - os: ubuntu-latest
            arch: x86_64
            cmake_args: '-DARCH=x86_64 -DBUILD_SHARED_LIBS=ON -DCMAKE_C_FLAGS="-fPIC"'
            artifact_name: 'librandomx_linux_x86_64.so'
            output_lib: 'librandomx_linux_x86_64.so'
          # Linux - amd64
          - os: ubuntu-latest
            arch: amd64
            cmake_args: '-DARCH=native -DBUILD_SHARED_LIBS=ON -DCMAKE_C_FLAGS="-fPIC"'
            artifact_name: 'librandomx_linux_amd64.so'
            output_lib: 'librandomx_linux_amd64.so'
          # macOS - x86_64
          - os: macos-latest
            arch: x86_64
            cmake_args: '-DARCH=x86_64 -DBUILD_SHARED_LIBS=ON'
            artifact_name: 'librandomx_macos_x86_64.dylib'
            output_lib: 'librandomx_macos_x86_64.dylib'
          # macOS - aarch64
          - os: macos-latest
            arch: aarch64
            cmake_args: '-DARCH=arm64 -DBUILD_SHARED_LIBS=ON'
            artifact_name: 'librandomx_macos_aarch64.dylib'
            output_lib: 'librandomx_macos_aarch64.dylib'
          # Windows - x86_64
          - os: windows-latest
            arch: x86_64
            cmake_args: '-G "MinGW Makefiles" -DARCH=native -DBUILD_SHARED_LIBS=ON'
            artifact_name: 'librandomx_windows_x86_64.dll'
            output_lib: 'librandomx_windows_x86_64.dll'
        exclude:
          # Exclude unsupported combinations
          - os: ubuntu-latest
            arch: aarch64
          - os: macos-latest
            arch: amd64
          - os: windows-latest
            arch: aarch64
          - os: windows-latest
            arch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt-get update && sudo apt-get install -y cmake build-essential
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            brew install cmake
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          fi
        shell: bash

      - name: Compile RandomX
        run: |
          cd randomx
          mkdir build && cd build
          cmake .. ${{ matrix.cmake_args }}
          make
          mkdir -p ../../src/main/resources/native
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cp *.so ../../src/main/resources/native/${{ matrix.output_lib }}
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            cp *.dylib ../../src/main/resources/native/${{ matrix.output_lib }}
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp *.dll ../../src/main/resources/native/${{ matrix.output_lib }}
          fi
        shell: bash

      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: src/main/resources/native/${{ matrix.output_lib }}

  build-java:
    runs-on: ubuntu-latest
    needs: build-randomx
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Dynamic Link Library Artifacts
        uses: actions/download-artifact@v4
        with:
          path: src/main/resources/native/
          pattern: librandomx-*
      - run: ls src/main/resources/native/

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: xdagj-native-randomx-jar
          path: target/xdagj-native-randomx-*.jar

  release:
    runs-on: ubuntu-latest
    needs: build-java
    steps:
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: xdagj-native-randomx-jar
          path: target/

      - name: Generate Detailed Release Notes
        id: release_notes
        run: |
            echo "### Changelog" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "$(git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0)..HEAD)" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "### Additional Notes" >> RELEASE_NOTES.md
            echo "- Build improvements." >> RELEASE_NOTES.md
            echo "- Known issues: None." >> RELEASE_NOTES.md
            echo "release_notes=$(cat RELEASE_NOTES.md)" >> $GITHUB_ENV

      - name: Find Main JAR File
        id: find_jar
        run: |
            JAR_FILE=$(ls target/xdagj-native-randomx-*.jar | grep -v sources | grep -v javadoc | head -n 1)
            echo "Found JAR file: $JAR_FILE"
            echo "jar_file=$JAR_FILE" >> $GITHUB_ENV

      - name: Generate SHA256 Checksum
        id: checksum
        run: |
           sha256sum ${{ env.jar_file }} > checksum.txt
           echo "checksum=$(cat checksum.txt)" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: xdagj-native-randomx v${{ env.VERSION }}
          body: |
              ${{ env.release_notes }}
              ### Checksums

              ${{ env.checksum }}
          draft: true

      - name: Upload JAR with Native Libraries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.jar_file }}
          asset_name: xdagj-native-randomx.jar
          asset_content_type: application/java-archive
